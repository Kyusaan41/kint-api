const { SlashCommandBuilder } = require('discord.js');
const axios = require('axios');
const fs = require('fs');
const path = require('path');

const memoryPath = path.join(__dirname, '../ia_memory.json'); // adapte le chemin si besoin

function loadMemory() {
  if (!fs.existsSync(memoryPath)) return {};
  return JSON.parse(fs.readFileSync(memoryPath, 'utf8'));
}

function saveMemory(memory) {
  fs.writeFileSync(memoryPath, JSON.stringify(memory, null, 2));
}

module.exports = {
  data: new SlashCommandBuilder()
    .setName('question')
    .setDescription("‚ö° Parle avec le bot!")
    .addStringOption(option =>
      option.setName('message')
        .setDescription("Question")
        .setRequired(true)),

  async execute(interaction) {
    const userInput = interaction.options.getString('message');
    const userId = interaction.user.id;

    await interaction.deferReply();
    await interaction.editReply("ü§î Ky√ª ne m'as pas programm√© pour √™tre rapide.. G√©n√©ration de la r√©ponse en cours..‚åõ");

    const memory = loadMemory();
    const userHistory = memory[userId] || [];

    const context = [
      {
        role: "system",
        content: "Tu es le bot d‚Äôun serveur Discord fran√ßais cr√©er par Ky√ª. tu r√©ponds toujours en fran√ßais avec des r√©ponses courtes et famili√®re. Tu es un exellent vanneur, et toujours d'accord avec l'utilisateur qui te parles."
      },
      ...userHistory.slice(-30), // ‚Üî Garde les 15 derniers √©changes
      {
        role: "user",
        content: userInput
      }
    ];

    try {
      const response = await axios.post(
        'https://openrouter.ai/api/v1/chat/completions',
        {
          model: "meta-llama/llama-3-8b-instruct", // ou autre mod√®le si tu veux
          messages: context
        },
        {
          headers: {
            'Authorization': `Bearer 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`, // remplace avec ta cl√©
            'Content-Type': 'application/json'
          }
        }
      );

      const reply = response.data.choices[0].message.content;

      // Met √† jour la m√©moire
      userHistory.push({ role: "user", content: userInput });
      userHistory.push({ role: "assistant", content: reply });
      memory[userId] = userHistory.slice(-30); // toujours max 15 √©changes
      saveMemory(memory);

      await interaction.editReply(`**‚ú® Toi :** ${userInput}\n**üê∏ KINT :** ${reply}`);
    } catch (err) {
      console.error("Erreur IA :", err.response?.data || err.message);
      await interaction.editReply("üí• KINT a bugg√© ! R√©essaie dans quelques instants...");
    }
  }
};
